#include <iostream>
#include <string>
#include <cstdlib>
#include <curl/curl.h>
#include <nlohmann/json.hpp>
#include <algorithm>
#include <opencv2/opencv.hpp>
#include <tesseract/baseapi.h>
#include <leptonica/allheaders.h>
#include <regex>
#include <fstream>

using json = nlohmann::json;
using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Gemini API Configuration
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const string GEMINI_API_KEY = "YOUR_GEMINI_API_KEY";
const string GEMINI_API_URL =
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + GEMINI_API_KEY;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper: cURL write callback
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
size_t WriteCallback(void* contents, size_t size, size_t nmemb, string* output) {
    size_t totalSize = size * nmemb;
    output->append((char*)contents, totalSize);
    return totalSize;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Helper: Lowercase conversion
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
string to_lower(string s) {
    transform(s.begin(), s.end(), s.begin(), [](unsigned char c){ return tolower(c); });
    return s;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OCR Camera Method
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


pair<string, string> CameraToText() {
    cv::VideoCapture cap(0);
    if (!cap.isOpened()) {
        cerr << "Error: Cannot open camera\n";
        return {"", ""};
    }

    tesseract::TessBaseAPI tess;
    if (tess.Init(NULL, "eng")) {
        cerr << "Error: Could not initialize Tesseract.\n";
        return {"", ""};
    }

    cout << "Press 'c' to capture an image for OCR, or ESC to quit.\n";

    cv::Mat frame;
    string name, guild;

    while (true) {
        cap >> frame;
        if (frame.empty()) break;

        cv::imshow("Camera", frame);

        char key = (char)cv::waitKey(30);
        if (key == 'c') {
            cv::Mat gray;
            cv::cvtColor(frame, gray, cv::COLOR_BGR2GRAY);
            cv::threshold(gray, gray, 120, 255, cv::THRESH_BINARY);

            tess.SetImage((uchar*)gray.data, gray.size().width, gray.size().height, gray.channels(), gray.step1());
            string text = tess.GetUTF8Text();

            cout << "\nExtracted Text:\n" << text << "\n";

            regex namePattern("Carlos|(?<=Name[:\\s])\\w+");
            regex guildPattern("Alien|(?<=Group[:\\s])\\w+");

            smatch match;
            if (regex_search(text, match, namePattern)) name = match.str();
            if (regex_search(text, match, guildPattern)) guild = match.str();

            cout << "\n--- Extracted Fields ---\n";
            cout << "Name: " << (name.empty() ? "Not found" : name) << "\n";
            cout << "Guild: " << (guild.empty() ? "Not found" : guild) << "\n";

            ofstream out("extracted_info.txt");
            out << "name=" << name << "\n";
            out << "guild=" << guild << "\n";
            out.close();

            cout << "Saved results to extracted_info.txt\n";
            break;
        } else if (key == 27) { // ESC
            break;
        }
    }

    cap.release();
    cv::destroyAllWindows();
    tess.End();

    return {name, guild};
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Randomized story snippets
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int randnum = (rand() % 3) + 1;

string Outlaw(){
    if (randnum == 1)
        return "outlaw cow with utters on its head dancing, on MarsSpelledBackwards";
    else if (randnum == 2)
        return "after successfully robbing a bank, you drunkenly tried to rob the same bank";
    else 
        return "you get ready to rob a bank. You have your fake mustache, boots, and the hat of a sherif you stole a long time ago. but you forget it's the cyberpunk era";
}

string Cowboy(){
    if (randnum == 1)
        return "hot tub time machine into the present on Nov.9, their birthday, in an undisclosed major city";
    else if (randnum == 2)
        return "Enters therapy because they keep losing their duels to doors";
    else 
        return "you are ready to leave town so you get on your chicken because you are too good for horses";
}

string Sherif(){
    if (randnum == 1)
        return "Stand off, with a cow-cowboy with a pistol in its mouth";
    else if (randnum == 2)
        return "cyborg sherif meets you during one of its nightly patrols";
    else
        return "The same horse keeps arresting you, the sherif";
}

string Alien(){
    if (randnum == 1)
        return "making a human disguise and working a dead-end job as an accountant";
    else if (randnum == 2)
        return "in a slapping contest with Will Smith fighting";
    else
        return "Aliens abduct you, but then almost immediately return you cuz you keep asking 'are we there yet?'";
}

string Martian(){
    if (randnum == 1)
        return "you a martian, are watching a new episode of your favorite reality TV show called 'Humans'";
    else if (randnum == 2)
        return "you are a martian and reminisce about your tour of Earth, that was 6 years ago and youâ€™ve yet to find the exit in this IKEA";
    else
        return "you, a martian, find out about dogs and immediately start a 'Bring Dogs to Mars' campaign.";
}

string FFBI(){
    if (randnum == 1)
        return "you are being hunted down by the (FFBI) Future Federal Bureau of Investigation";
    if (randnum == 2)
        return "It all started with you walking in with a banana, and ended with The Fast Food Burrito Incident";
    else
        return "You've doomed us all. The rapture begins.";
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Main Program
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main() {
    srand(time(0));

    string name, guild;

    cout << "Use camera to detect name and guild? (y/n): ";
    char choice;
    cin >> choice;
    cin.ignore();

    if (choice == 'y' || choice == 'Y') {
        auto result = CameraToText();
        name = result.first;
        guild = result.second;
    }

    if (name.empty()) {
        cout << "Enter your name: ";
        getline(cin, name);
    }

    if (guild.empty()) {
        cout << "Enter your guild: ";
        getline(cin, guild);
    }

    guild = to_lower(guild);

    string givePrompt;
    if(guild == "alien") givePrompt = Alien();
    else if(guild == "cowboy") givePrompt = Cowboy();
    else if(guild == "outlaw") givePrompt = Outlaw();
    else if(guild == "sherif") givePrompt = Sherif();
    else if(guild == "martian") givePrompt = Martian();
    else givePrompt = FFBI();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Create the prompt for Gemini
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    json prompt = {
        {"contents", {{
            {"role", "user"},
            {"parts", {{{"text",
                "Hello Gemini! My name is " + name + " please write a short story about: " + givePrompt}}}}
        }}}
    };

    string responseBuffer;

    CURL* curl = curl_easy_init();
    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, GEMINI_API_URL.c_str());
        curl_easy_setopt(curl, CURLOPT_POST, 1L);

        string jsonData = prompt.dump();
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, jsonData.c_str());

        struct curl_slist* headers = nullptr;
        headers = curl_slist_append(headers, "Content-Type: application/json");
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);

        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &responseBuffer);

        CURLcode res = curl_easy_perform(curl);
        if (res != CURLE_OK)
            cerr << "CURL error: " << curl_easy_strerror(res) << endl;

        curl_easy_cleanup(curl);
        curl_slist_free_all(headers);
    } else {
        cerr << "Failed to initialize CURL!" << endl;
        return 1;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Parse and display response
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    try {
        json result = json::parse(responseBuffer);
        if (result.contains("candidates")) {
            string reply = result["candidates"][0]["content"]["parts"][0]["text"];
            cout << "\nGemini says:\n" << reply << endl;
        } else {
            cout << "Unexpected response:\n" << responseBuffer << endl;
        }
    } catch (const exception& e) {
        cerr << "JSON parse error: " << e.what() << endl;
        cerr << "Raw response:\n" << responseBuffer << endl;
    }

    return 0;
}
